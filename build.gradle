group 'uk.ac.ebi.subs'
version '2.10.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

mainClassName = "uk.ac.ebi.subs.CoreProcessingApp"

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.10.RELEASE")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
    }
}

repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
        mavenLocal()
}

dependencies {
    compile("uk.ac.ebi.subs:subs-processing-model:2.12.0-SNAPSHOT")
    compile("uk.ac.ebi.subs:subs-messaging:0.4.0-SNAPSHOT")
    compile("uk.ac.ebi.subs:subs-repository:2.29.0-SNAPSHOT")

    compileOnly("org.projectlombok:lombok:1.16.18")
    compile ('org.atteo:evo-inflector:1.2.1') // better pluralisation
    compile("org.springframework.boot:spring-boot-starter-hateoas")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile 'org.codehaus.groovy:groovy-all:2.4.10'
    compile 'org.springframework.security:spring-security-core'
    compile 'com.auth0:java-jwt:3.2.0'
    compile ("org.springframework.hateoas:spring-hateoas:0.23.0.RELEASE") // for traverson
    compile ("com.mashape.unirest:unirest-java:1.4.9")
    compile("de.siegmar:logback-gelf:1.1.0")

    testCompile("junit:junit")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task sourceJar(type: Jar) { from sourceSets.main.allJava }

artifacts {
    archives jar
    archives sourceJar {
        classifier "sources"
        destinationDir = new File("build/libs/sources")
    }
}

task('externalCiTest', type: Test) {
    useJUnit {
        excludeCategories 'uk.ac.ebi.subs.MongoDBDependentTest'
    }
    testLogging {
        exceptionFormat = 'full'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

            }

            pom.project {
                packaging 'jar'
                url 'https://github.com/EMBL-EBI-SUBS/subs-dispatcher'

                scm {
                    url 'https://github.com/EMBL-EBI-SUBS/subs-dispatcher.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'subs-internal'
                        name 'EMBL-EBI-SUBS'
                        email 'subs-internal@ebi.ac.uk'
                    }
                }
            }
        }
    }
}

springBoot {
    executable = true
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

def devDeployHostName = hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
def testDeployHostName = hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
def prodDeployHostName = hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'

remotes {
    submission_dev {
        role('dev')
        host = devDeployHostName
    }
    submission_test {
        role('test')
        host = testDeployHostName
    }
    submission_prod {
        role('prod')
        host = prodDeployHostName
    }
}

task deployJar(type: SshTask, dependsOn: 'assemble') {
    doLast {
        def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar",uploadJarFileName)
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployFile) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    File jarDeployDir = jarDeployFile.getParentFile()
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}
