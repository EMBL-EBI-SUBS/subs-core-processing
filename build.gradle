buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
    }
}

plugins {
    id 'java-library'
    id 'org.springframework.boot' version '2.2.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.hidetake.ssh' version "2.10.1"
    id "com.sourcemuse.mongo" version "1.0.7"
}

group 'uk.ac.ebi.subs'
version '2.13.0'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

bootJar {
    mainClassName = "uk.ac.ebi.subs.CoreProcessingApp"
    launchScript()
}

springBoot {
    buildInfo()
}

repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        mavenCentral()
        mavenLocal()
}

dependencies {
    implementation "uk.ac.ebi.subs:subs-processing-model:2.14.0-SNAPSHOT"
    implementation "uk.ac.ebi.subs:subs-messaging:0.5.0-SNAPSHOT"
    implementation "uk.ac.ebi.subs:subs-repository:2.31.0-SNAPSHOT"

    implementation  "org.atteo:evo-inflector:1.2.1" // better pluralisatio
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation("org.springframework.boot:spring-boot-starter-amqp")

    implementation "de.siegmar:logback-gelf:1.1.0"

    implementation "de.codecentric:spring-boot-admin-starter-client:2.1.6"

    compileOnly "org.projectlombok:lombok:1.18.10"
    annotationProcessor "org.projectlombok:lombok:1.18.10"

    testCompile "org.springframework.boot:spring-boot-starter-test"
}

task externalCiTest(type: Test) {
    useJUnit {
        excludeCategories 'uk.ac.ebi.subs.util.MongoDBDependentTest'
    }
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }

    configure(externalCiTest) {
        group = 'verification'
        description = 'Run tests suitable for our external continuous integration environment.'
    }
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task printJarName {
    doLast {
        println "$jar.archivePath.name"
    }

}

task printJarFullPath {
    doLast {
        println "$jar.archivePath.absolutePath"
    }
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

def devDeployHostName = hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
def testDeployHostName = hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
def prodDeployHostName = hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'

remotes {
    submission_dev {
        role('dev')
        host = devDeployHostName
    }
    submission_test {
        role('test')
        host = testDeployHostName
    }
    submission_prod {
        role('prod')
        host = prodDeployHostName
    }
}

task deployJar(dependsOn: 'assemble') {
    doLast {
        def uploadJarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
        File jarDeployDir = new File("/data/$gradle_env/$project.name/jar",uploadJarFileName)
        sshRun(jarDeployDir)
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun(File jarDeployFile) {
    def uploadJarFileName = name + "-"  + version + "." + System.currentTimeMillis() + ".jar"
    File jarDeployDir = jarDeployFile.getParentFile()
    ssh.run {
        session(remotes.role(gradle_env)) {
            execute "/homes/sub_adm/create_dirs.sh $gradle_env $project.name", ignoreError: false
            println "Uploading jar $jar.archivePath.name to $jarDeployDir/$uploadJarFileName  area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}
